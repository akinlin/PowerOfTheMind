End Game

Server
- collects user random number sequences
- generates computer random number sequences
- stores turns in database
- generates reports of data

Client
- generates random number sequences
	- use predictability cloud pseudo random number generator
- displays feedback to the user
	- battle sequence the user is instructed to control the outcome with their mind

	
bag
item 0 : value 1
item 1 : value 1
item 2 : value 1
item 3 : value 2
item 4 : value 2
item 5 : value 3

items are randomly chosen and removed from the bag. Once all items have been removed they are added back into the bag and reshuffled.

each item has 1/n chance of being chosen, where 'n' is the total number of items left in bag.
each value has d/n chance of being chosen, where 'n' is the total number of items left in bag and 'd' is the total number of items left in bag with the same value.

predictability of the next value increases as the number of items chosen reaches 'n', with 100% accuracy at the 'n'th item.

predictability map
turn 1 [0:1 1:1 2:1 3:2 4:2 5:3] - 6
value 1 (3) - 50%
value 2 (2) - 33%
value 3 (1) - 17%
item 4 chosen

turn 2 [0:1 1:1 2:1 3:2 5:3] - 5
value 1 (3) - 60%
value 2 (1) - 20%
value 3 (1) - 20%
item 0 chosen

turn 3 [1:1 2:1 3:2 5:3] - 4
value 1 (2) - 50%
value 2 (1) - 25%
value 3 (1) - 25%
item 5 chosen

turn 4 [1:1 2:1 3:2] - 3
value 1 (2) - 67%
value 2 (1) - 33%
value 3 (0) - 0%
item 2 chosen

turn 5 [1:1 3:2] - 2
value 1 (1) - 50%
value 2 (1) - 50%
value 3 (0) - 0%
item 3 chosen

turn 6 [1:1] - 1
value 1 (1) - 100%
value 2 (0) - 0%
value 3 (0) - 0%
item 1 chosen

turn 7 [0:2 1:3 2:1 3:1 4:2 5:1] - 6
value 1 (3) - 50%
value 2 (2) - 33%
value 3 (1) - 17%

At any given time the system knows the predictability of each value being chosen next.
Furthermore the system knows exactly the number that will be chosen next when accounting for previous swaps.
If the number is frequently outside of the predictability cloud in favour of the player then it could be contributed to human influence.

A simple test for deviation can be to expect the number with the highest percentage is chosen most often. The on screen battle outcomes would be
determined by this. When a number is picked from the bag the percentage chance of it being chosen is evaluated into either a 1 or 0 value. In the
lower levels getting higher percentage numbers will result in completing the stages, but in higher levels getting lower percentage numbers will
complete stages.

Since the final number in the bag is known and chance of picking the highest percentage number is 100% the player will always get a 1. It may be
unfair to force the player to try to make the computer do something that is technically impossible. So in the instances where the final number is 
drawn the result must always be positive or neutral to the outcome of the battle. However if the player is able to draw a number with 0% chance the
level shall be completed and results recorded on the server as abnormal. It will be interesting to see if their are players that consistently draw 
0% number to finish the game. Especially without instruction that this event causes direct level progression. These kind of results would be highly
unexpected and would indicate conclusively the player was influencing the result with their mind. Or more likely it is a bug in the system or is the
result of malicious tampering with the program or results sent to the server.

Example battle
Level 1 - turn 1 [0:1 1:1 2:1 3:2 4:2 5:3] - 6
value 1 (3) - 50%
value 2 (2) - 33%
value 3 (1) - 17%
item 4 value 2 chosen
33% chance not highest (50%) return 0
player takes damage

Level 1 - turn 2 [0:1 1:1 2:1 3:2 5:3] - 5
value 1 (3) - 60%
value 2 (1) - 20%
value 3 (1) - 20%
item 0 value 1 chosen
60% chance is highest (60%) return 1
enemy takes damage

Level 1 - turn 3 [1:1 2:1 3:2 5:3] - 4
value 1 (2) - 50%
value 2 (1) - 25%
value 3 (1) - 25%
item 5 value 3 chosen
25% chance is not highest (50%) return 0
player takes damage

Level 1 - turn 4 [1:1 2:1 3:2] - 3
value 1 (2) - 67%
value 2 (1) - 33%
value 3 (0) - 0%
item 2 value 1 chosen
33% chance is not highest (67%) return 0
player takes damage

Level 1 - turn 5 [1:1 3:2] - 2
value 1 (1) - 50%
value 2 (1) - 50%
value 3 (0) - 0%
item 3 value 2 chosen
50% chance is highest (50%) return 1
enemy takes damage

Level 1 - turn 6 [1:1] - 1
value 1 (1) - 100%
value 2 (0) - 0%
value 3 (0) - 0%
item 1 value 1 chosen
100% chance is highest (100%) return 1
enemy takes damage

Level 1 - turn 6 [1:1] - 1
value 1 (1) - 100%
value 2 (0) - 0%
value 3 (0) - 0%
item 1 value 1 chosen
100% chance is highest (100%) return 1
enemy takes damage

Level 1 - turn 7 [0:2 1:3 2:1 3:1 4:2 5:1] - 6
value 1 (3) - 50%
value 2 (2) - 33%
value 3 (1) - 17%
...
...
enemy took 4 damage player took 3 damage - player wins


////////
// Debug Stuff

Add(100, 0.1f);
Add(50, 0.2f);
Add(25, 0.3f);
Add(10, 0.4f);
	
Bag
[0:(100:0.1)]
[7:(10:0.4)]
[2:(50:0.2)]
[3:(25:0.3)]
[4:(25:0.3)]
[9:(10:0.4)]
[6:(10:0.4)]
[8:(10:0.4)]
[1:(50:0.2)]
[5:(25:0.3)]


BagValueMap == [
  { Key: 100, Value: 1 },
  { Key: 50, Value: 1 },
  { Key: 25, Value: 1 },
  { Key: 10, Value: 2 }
 ]
 
New run
50:20.0
10:44.44
10:37.5
100:14.28
10:33.33
50:20
25:75
25:66.66
10:50
25:50 - should be 100%

10:40
25:44.44 - should be 33.33
10:37.5
50:14.28 - should be 28.57
25:50 - should be 33.33
50:0

New run
50:20.0
10:44.44
10:37.5
50:14.28
10:33.33
25:60
100:25
10:33.33
25:100
25:100

10:40
25:44.44
25:37.5

